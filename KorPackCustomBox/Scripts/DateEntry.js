(function($) { function DateEntry() { this._disabledInputs = []; this.regional = []; this.regional[''] = { dateFormat: 'mdy/', monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'], monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'], dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'], spinnerTexts: ['Today', 'Previous field', 'Next field', 'Increment', 'Decrement'] }; this._defaults = { appendText: '', initialField: 0, useMouseWheel: true, defaultDate: null, minDate: null, maxDate: null, spinnerImage: null, spinnerSize: [20, 20, 8], spinnerBigImage: null, spinnerBigSize: [40, 40, 16], spinnerIncDecOnly: false, spinnerRepeat: [500, 250], beforeShow: null }; $.extend(this._defaults, this.regional['']); } var PROP_NAME = 'dateEntry'; $.extend(DateEntry.prototype, { markerClassName: 'hasDateEntry', setDefaults: function(options) { extendRemove(this._defaults, options || {}); return this; }, _connectDateEntry: function(target, options) { var input = $(target); if (input.hasClass(this.markerClassName)) { return; } var inst = {}; inst.options = $.extend({}, options); inst._selectedYear = 0; inst._selectedMonth = 0; inst._selectedDay = 0; inst._field = 0; inst.input = $(target); $.data(target, PROP_NAME, inst); var spinnerImage = this._get(inst, 'spinnerImage'); var spinnerText = this._get(inst, 'spinnerText'); var spinnerSize = this._get(inst, 'spinnerSize'); var appendText = this._get(inst, 'appendText'); var spinner = (!spinnerImage ? null : $('<span class="dateEntry_control" style="display: inline-block; ' + 'background: url(\'' + spinnerImage + '\') 0 0 no-repeat; ' + 'width: ' + spinnerSize[0] + 'px; height: ' + spinnerSize[1] + 'px;' + ($.browser.mozilla && $.browser.version < '1.9' ? ' padding-left: ' + spinnerSize[0] + 'px; padding-bottom: ' + (spinnerSize[1] - 18) + 'px;' : '') + '"></span>')); input.wrap('<span class="dateEntry_wrap"></span>').after(appendText ? '<span class="dateEntry_append">' + appendText + '</span>' : '').after(spinner || ''); input.addClass(this.markerClassName).bind('focus.dateEntry', this._doFocus).bind('blur.dateEntry', this._doBlur).bind('click.dateEntry', this._doClick).bind('keydown.dateEntry', this._doKeyDown).bind('keypress.dateEntry', this._doKeyPress); if ($.browser.mozilla) { input.bind('input.dateEntry', function(event) { $.dateEntry._parseDate(inst); }); } if ($.browser.msie) { input.bind('paste.dateEntry', function(event) { setTimeout(function() { $.dateEntry._parseDate(inst); }, 1); }); } if (this._get(inst, 'useMouseWheel') && $.fn.mousewheel) { input.mousewheel(this._doMouseWheel); } if (spinner) { spinner.mousedown(this._handleSpinner).mouseup(this._endSpinner).mouseover(this._expandSpinner).mouseout(this._endSpinner).mousemove(this._describeSpinner); } }, _enableDateEntry: function(input) { this._enableDisable(input, false); }, _disableDateEntry: function(input) { this._enableDisable(input, true); }, _enableDisable: function(input, disable) { var inst = $.data(input, PROP_NAME); if (!inst) { return; } input.disabled = disable; if (input.nextSibling && input.nextSibling.nodeName.toLowerCase() == 'span') { $.dateEntry._changeSpinner(inst, input.nextSibling, (disable ? 5 : -1)); } $.dateEntry._disabledInputs = $.map($.dateEntry._disabledInputs, function(value) { return (value == input ? null : value); }); if (disable) { $.dateEntry._disabledInputs.push(input); } }, _isDisabledDateEntry: function(input) { return $.inArray(input, this._disabledInputs) > -1; }, _changeDateEntry: function(input, options) { var inst = $.data(input, PROP_NAME); if (inst) { var currentDate = this._extractDate(inst); extendRemove(inst.options, options || {}); if (currentDate) { this._setDate(inst, currentDate); } } $.data(input, PROP_NAME, inst); }, _destroyDateEntry: function(input) { $input = $(input); if (!$input.hasClass(this.markerClassName)) { return; } $input.removeClass(this.markerClassName).unbind('.dateEntry'); if ($.fn.mousewheel) { $input.unmousewheel(); } this._disabledInputs = $.map(this._disabledInputs, function(value) { return (value == input ? null : value); }); $input.parent().replaceWith($input); $.removeData(input, PROP_NAME); }, _setDateDateEntry: function(input, date) { var inst = $.data(input, PROP_NAME); if (inst) { this._setDate(inst, date ? (typeof date == 'object' ? new Date(date.getTime()) : date) : null); } }, _getDateDateEntry: function(input) { var inst = $.data(input, PROP_NAME); return (inst ? this._extractDate(inst) : null); }, _doFocus: function(target) { var input = (target.nodeName && target.nodeName.toLowerCase() == 'input' ? target : this); if ($.dateEntry._lastInput == input || $.dateEntry._isDisabledDateEntry(input)) { $.dateEntry._focussed = false; return; } var inst = $.data(input, PROP_NAME); $.dateEntry._focussed = true; $.dateEntry._lastInput = input; $.dateEntry._blurredInput = null; var beforeShow = $.dateEntry._get(inst, 'beforeShow'); extendRemove(inst.options, (beforeShow ? beforeShow.apply(input, [input]) : {})); $.data(input, PROP_NAME, inst); $.dateEntry._parseDate(inst); setTimeout(function() { $.dateEntry._showField(inst); }, 10); }, _doBlur: function(event) { $.dateEntry._blurredInput = $.dateEntry._lastInput; $.dateEntry._lastInput = null; }, _doClick: function(event) { var input = event.target; var inst = $.data(input, PROP_NAME); if (!$.dateEntry._focussed) { var dateFormat = $.dateEntry._get(inst, 'dateFormat'); inst._field = 0; if (input.selectionStart != null) { var end = 0; for (var field = 0; field < 3; field++) { end += $.dateEntry._fieldLength(inst, field, dateFormat) + 1; inst._field = field; if (input.selectionStart < end) { break; } } } else if (input.createTextRange) { var src = $(event.srcElement); var range = input.createTextRange(); var convert = function(value) { return { thin: 2, medium: 4, thick: 6}[value] || value; }; var offsetX = event.clientX + document.documentElement.scrollLeft - (src.offset().left + parseInt(convert(src.css('border-left-width')), 10)) - range.offsetLeft; var end = 0; for (var field = 0; field < 3; field++) { end += $.dateEntry._fieldLength(inst, field, dateFormat) + 1; range.collapse(); range.moveEnd('character', end); inst._field = field; if (offsetX < range.boundingWidth) { break; } } } } $.data(input, PROP_NAME, inst); $.dateEntry._showField(inst); $.dateEntry._focussed = false; }, _doKeyDown: function(event) { if (event.keyCode >= 48) { return true; } var inst = $.data(event.target, PROP_NAME); switch (event.keyCode) { case 9: return true; case 27: return true; case 35: if (event.ctrlKey) { $.dateEntry._setValue(inst, ''); } else { inst._field = 2; $.dateEntry._adjustField(inst, 0); } break; case 36: if (event.ctrlKey) { $.dateEntry._setDate(inst); } else { inst._field = 0; $.dateEntry._adjustField(inst, 0); } break; case 37: $.dateEntry._changeField(inst, -1, false); break; case 38: $.dateEntry._adjustField(inst, +1); break; case 39: $.dateEntry._changeField(inst, +1, false); break; case 40: $.dateEntry._adjustField(inst, -1); break; case 46: $.dateEntry._setValue(inst, ''); break; } return false; }, _doKeyPress: function(event) { var chr = String.fromCharCode(event.charCode == undefined ? event.keyCode : event.charCode); if (chr < ' ') { return true; } var inst = $.data(event.target, PROP_NAME); $.dateEntry._handleKeyPress(inst, chr); return false; }, _doMouseWheel: function(event, delta) { if ($.dateEntry._isDisabledDateEntry(event.target)) { return; } delta = ($.browser.opera ? -delta / Math.abs(delta) : ($.browser.safari ? delta / Math.abs(delta) : delta)); var inst = $.data(event.target, PROP_NAME); inst.input.focus(); if (!inst.input.val()) { $.dateEntry._parseDate(inst); } $.dateEntry._adjustField(inst, delta); event.preventDefault(); }, _expandSpinner: function(event) { var spinner = $.dateEntry._getSpinnerTarget(event); var inst = $.data($.dateEntry._getInput(spinner), PROP_NAME); var spinnerBigImage = $.dateEntry._get(inst, 'spinnerBigImage'); if (spinnerBigImage) { inst._expanded = true; var offset = $(spinner).offset(); var relative = null; $(spinner).parents().each(function() { var parent = $(this); if (parent.css('position') == 'relative' || parent.css('position') == 'absolute') { relative = parent.offset(); } return !relative; }); var spinnerSize = $.dateEntry._get(inst, 'spinnerSize'); var spinnerBigSize = $.dateEntry._get(inst, 'spinnerBigSize'); $('<div class="dateEntry_expand" style="position: absolute; left: ' + (offset.left - (spinnerBigSize[0] - spinnerSize[0]) / 2 - (relative ? relative.left : 0)) + 'px; top: ' + (offset.top - (spinnerBigSize[1] - spinnerSize[1]) / 2 - (relative ? relative.top : 0)) + 'px; width: ' + spinnerBigSize[0] + 'px; height: ' + spinnerBigSize[1] + 'px; background: transparent url(' + spinnerBigImage + ') no-repeat 0px 0px; z-index: 10;"></div>').mousedown($.dateEntry._handleSpinner).mouseup($.dateEntry._endSpinner).mouseout($.dateEntry._endExpand).mousemove($.dateEntry._describeSpinner).insertAfter(spinner); } }, _getInput: function(spinner) { return $(spinner).siblings('.' + $.dateEntry.markerClassName)[0]; }, _describeSpinner: function(event) { var spinner = $.dateEntry._getSpinnerTarget(event); var inst = $.data($.dateEntry._getInput(spinner), PROP_NAME); spinner.title = $.dateEntry._get(inst, 'spinnerTexts')[$.dateEntry._getSpinnerRegion(inst, event)]; }, _handleSpinner: function(event) { var spinner = $.dateEntry._getSpinnerTarget(event); var input = $.dateEntry._getInput(spinner); if ($.dateEntry._isDisabledDateEntry(input)) { return; } if (input == $.dateEntry._blurredInput) { $.dateEntry._lastInput = input; $.dateEntry._blurredInput = null; } var inst = $.data(input, PROP_NAME); $.dateEntry._doFocus(input); var region = $.dateEntry._getSpinnerRegion(inst, event); $.dateEntry._changeSpinner(inst, spinner, region); $.dateEntry._actionSpinner(inst, region); $.dateEntry._timer = null; $.dateEntry._handlingSpinner = true; var spinnerRepeat = $.dateEntry._get(inst, 'spinnerRepeat'); if (region >= 3 && spinnerRepeat[0]) { $.dateEntry._timer = setTimeout(function() { $.dateEntry._repeatSpinner(inst, region); }, spinnerRepeat[0]); $(spinner).one('mouseout', $.dateEntry._releaseSpinner).one('mouseup', $.dateEntry._releaseSpinner); } }, _actionSpinner: function(inst, region) { if (!inst.input.val()) { $.dateEntry._parseDate(inst); } switch (region) { case 0: this._setDate(inst); break; case 1: this._changeField(inst, -1, false); break; case 2: this._changeField(inst, +1, false); break; case 3: this._adjustField(inst, +1); break; case 4: this._adjustField(inst, -1); break; } }, _repeatSpinner: function(inst, region) { if (!$.dateEntry._timer) { return; } $.dateEntry._lastInput = $.dateEntry._blurredInput; this._actionSpinner(inst, region); this._timer = setTimeout(function() { $.dateEntry._repeatSpinner(inst, region); }, this._get(inst, 'spinnerRepeat')[1]); }, _releaseSpinner: function(event) { clearTimeout($.dateEntry._timer); $.dateEntry._timer = null; }, _endExpand: function(event) { $.dateEntry._timer = null; var spinner = $.dateEntry._getSpinnerTarget(event); var input = $.dateEntry._getInput(spinner); var inst = $.data(input, PROP_NAME); $(spinner).remove(); inst._expanded = false; }, _endSpinner: function(event) { $.dateEntry._timer = null; var spinner = $.dateEntry._getSpinnerTarget(event); var input = $.dateEntry._getInput(spinner); var inst = $.data(input, PROP_NAME); if (!$.dateEntry._isDisabledDateEntry(input)) { $.dateEntry._changeSpinner(inst, spinner, -1); } if ($.dateEntry._handlingSpinner) { $.dateEntry._lastInput = $.dateEntry._blurredInput; } if ($.dateEntry._lastInput && $.dateEntry._handlingSpinner) { $.dateEntry._showField(inst); } $.dateEntry._handlingSpinner = false; }, _getSpinnerTarget: function(event) { return event.target || event.srcElement; }, _getSpinnerRegion: function(inst, event) { var spinner = this._getSpinnerTarget(event); var pos = ($.browser.opera || $.browser.safari ? $.dateEntry._findPos(spinner) : $(spinner).offset()); var scrolled = ($.browser.safari ? $.dateEntry._findScroll(spinner) : [document.documentElement.scrollLeft || document.body.scrollLeft, document.documentElement.scrollTop || document.body.scrollTop]); var spinnerIncDecOnly = this._get(inst, 'spinnerIncDecOnly'); var left = (spinnerIncDecOnly ? 99 : event.clientX + scrolled[0] - pos.left - ($.browser.msie ? 2 : 0)); var top = event.clientY + scrolled[1] - pos.top - ($.browser.msie ? 2 : 0); var spinnerSize = this._get(inst, (inst._expanded ? 'spinnerBigSize' : 'spinnerSize')); var right = (spinnerIncDecOnly ? 99 : spinnerSize[0] - 1 - left); var bottom = spinnerSize[1] - 1 - top; if (spinnerSize[2] > 0 && Math.abs(left - right) <= spinnerSize[2] && Math.abs(top - bottom) <= spinnerSize[2]) { return 0; } var min = Math.min(left, top, right, bottom); return (min == left ? 1 : (min == right ? 2 : (min == top ? 3 : 4))); }, _changeSpinner: function(inst, spinner, region) { $(spinner).css('background-position', '-' + ((region + 1) * this._get(inst, (inst._expanded ? 'spinnerBigSize' : 'spinnerSize'))[0]) + 'px 0px'); }, _findPos: function(obj) { var curLeft = curTop = 0; if (obj.offsetParent) { curLeft = obj.offsetLeft; curTop = obj.offsetTop; while (obj = obj.offsetParent) { var origCurLeft = curLeft; curLeft += obj.offsetLeft; if (curLeft < 0) { curLeft = origCurLeft; } curTop += obj.offsetTop; } } return { left: curLeft, top: curTop }; }, _findScroll: function(obj) { var isFixed = false; $(obj).parents().each(function() { isFixed |= $(this).css('position') == 'fixed'; }); if (isFixed) { return [0, 0]; } var scrollLeft = obj.scrollLeft; var scrollTop = obj.scrollTop; while (obj = obj.parentNode) { scrollLeft += obj.scrollLeft || 0; scrollTop += obj.scrollTop || 0; } return [scrollLeft, scrollTop]; }, _get: function(inst, name) { return (inst.options[name] != null ? inst.options[name] : $.dateEntry._defaults[name]); }, _parseDate: function(inst) { var currentDate = this._extractDate(inst) || this._normaliseDate(this._determineDate(this._get(inst, 'defaultDate')) || new Date()); var dateFormat = this._get(inst, 'dateFormat'); inst._selectedYear = currentDate.getFullYear(); inst._selectedMonth = currentDate.getMonth(); inst._selectedDay = currentDate.getDate(); inst._lastChr = ''; inst._field = Math.max(0, Math.min(2, this._get(inst, 'initialField'))); if (inst.input.val() != '') { this._showDate(inst); } }, _extractDate: function(inst) { var value = inst.input.val(); var dateFormat = this._get(inst, 'dateFormat'); var values = value.split(dateFormat.charAt(3)); var year = 0; var month = 0; var day = 0; for (var i = 0; i < 3; i++) { var num = parseInt(values[i], 10); num = (isNaN(num) ? 0 : num); var field = dateFormat.charAt(i); switch (field) { case 'y': year = num; break; case 'm': month = num; break; case 'n': case 'N': month = $.inArray(values[i], this._get(inst, (field == 'N' ? 'monthNames' : 'monthNamesShort'))) + 1; break; case 'w': case 'W': if (dateFormat.charAt(3) == ' ') { values.splice(i, 1); num = parseInt(values[i], 10); } else { num = parseInt(values[i].substr(this._get(inst, (field == 'W' ? 'dayNames' : 'dayNamesShort'))[0].length + 1), 10); } num = (isNaN(num) ? 0 : num); case 'd': day = num; break; } } return (year && month && day ? new Date(year, month - 1, day) : null); }, _showDate: function(inst) { var dateFormat = this._get(inst, 'dateFormat'); var currentDate = ''; for (var i = 0; i < 3; i++) { currentDate += (i == 0 ? '' : dateFormat.charAt(3)); var field = dateFormat.charAt(i); switch (field) { case 'y': currentDate += this._formatNumber(inst._selectedYear); break; case 'm': currentDate += this._formatNumber(inst._selectedMonth + 1); break; case 'n': case 'N': currentDate += this._get(inst, (field == 'N' ? 'monthNames' : 'monthNamesShort'))[inst._selectedMonth]; break; case 'd': currentDate += this._formatNumber(inst._selectedDay); break; case 'w': case 'W': currentDate += this._get(inst, (field == 'W' ? 'dayNames' : 'dayNamesShort'))[new Date(inst._selectedYear, inst._selectedMonth, inst._selectedDay).getDay()] + ' ' + this._formatNumber(inst._selectedDay); break; } } this._setValue(inst, currentDate); this._showField(inst); }, _showField: function(inst) { var input = inst.input[0]; if (inst.input.is(':hidden') || $.dateEntry._lastInput != input) { return; } var dateFormat = this._get(inst, 'dateFormat'); var start = 0; for (var i = 0; i < inst._field; i++) { start += this._fieldLength(inst, i, dateFormat) + 1; } var end = start + this._fieldLength(inst, i, dateFormat); if (input.setSelectionRange) { input.setSelectionRange(start, end); } else if (input.createTextRange) { var range = input.createTextRange(); range.moveStart('character', start); range.moveEnd('character', end - inst.input.val().length); range.select(); } if (!input.disabled) { input.focus(); } }, _fieldLength: function(inst, field, dateFormat) { field = dateFormat.charAt(field); switch (field) { case 'y': return 4; case 'n': case 'N': return this._get(inst, (field == 'N' ? 'monthNames' : 'monthNamesShort'))[inst._selectedMonth].length; case 'w': case 'W': return this._get(inst, (field == 'W' ? 'dayNames' : 'dayNamesShort'))[new Date(inst._selectedYear, inst._selectedMonth, inst._selectedDay).getDay()].length + 3; default: return 2; } }, _formatNumber: function(value) { return (value < 10 ? '0' : '') + value; }, _setValue: function(inst, value) { if (value != inst.input.val()) { inst.input.val(value).trigger('change'); } }, _changeField: function(inst, offset, moveOut) { var atFirstLast = (inst.input.val() == '' || inst._field == (offset == -1 ? 0 : 2)); if (!atFirstLast) { inst._field += offset; } this._showField(inst); inst._lastChr = ''; $.data(inst.input[0], PROP_NAME, inst); return (atFirstLast && moveOut); }, _adjustField: function(inst, offset) { if (inst.input.val() == '') { offset = 0; } var field = this._get(inst, 'dateFormat').charAt(inst._field); var year = inst._selectedYear + (field == 'y' ? offset : 0); var month = inst._selectedMonth + (field == 'm' || field == 'n' || field == 'N' ? offset : 0); var day = (field == 'd' || field == 'w' || field == 'W' ? inst._selectedDay + offset : Math.min(inst._selectedDay, this._getDaysInMonth(year, month))); this._setDate(inst, new Date(year, month, day)); }, _getDaysInMonth: function(year, month) { return 32 - new Date(year, month, 32).getDate(); }, _setDate: function(inst, date) { date = this._normaliseDate(this._determineDate(date || this._get(inst, 'defaultDate')) || new Date()); var minDate = this._normaliseDate(this._determineDate(this._get(inst, 'minDate'))); var maxDate = this._normaliseDate(this._determineDate(this._get(inst, 'maxDate'))); date = (minDate && date < minDate ? minDate : (maxDate && date > maxDate ? maxDate : date)); inst._selectedYear = date.getFullYear(); inst._selectedMonth = date.getMonth(); inst._selectedDay = date.getDate(); this._showDate(inst); $.data(inst.input[0], PROP_NAME, inst); }, _determineDate: function(setting) { var offsetNumeric = function(offset) { var date = new Date(); date.setDate(date.getDate() + offset); return date; }; var offsetString = function(offset) { offset = offset.toLowerCase(); var date = new Date(); var year = date.getFullYear(); var month = date.getMonth(); var day = date.getDate(); var pattern = /([+-]?[0-9]+)\s*(d|w|m|y)?/g; var matches = pattern.exec(offset); while (matches) { switch (matches[2] || 'd') { case 'd': day += parseInt(matches[1], 10); break; case 'w': day += parseInt(matches[1], 10) * 7; break; case 'm': month += parseInt(matches[1], 10); break; case 'y': year += parseInt(matches[1], 10); break; } matches = pattern.exec(offset); } return new Date(year, month, day); }; return (setting ? (typeof setting == 'string' ? offsetString(setting) : (typeof setting == 'number' ? offsetNumeric(setting) : setting)) : null); }, _normaliseDate: function(date) { if (!date) { return null; } date.setHours(0); date.setMinutes(0); date.setSeconds(0); date.setMilliseconds(0); return date; }, _handleKeyPress: function(inst, chr) { var dateFormat = this._get(inst, 'dateFormat'); if (chr == dateFormat.charAt(3)) { this._changeField(inst, +1, false); } else if (chr >= '0' && chr <= '9') { var field = dateFormat.charAt(inst._field); var key = parseInt(chr, 10); var value = parseInt(inst._lastChr + chr, 10); var year = (field != 'y' ? inst._selectedYear : value); var month = (field != 'm' && field != 'n' && field != 'N' ? inst._selectedMonth + 1 : (value >= 1 && value <= 12 ? value : (key > 0 ? key : inst._selectedMonth + 1))); var day = (field != 'd' && field != 'w' && field != 'W' ? inst._selectedDay : (value >= 1 && value <= this._getDaysInMonth(year, month - 1) ? value : (key > 0 ? key : inst._selectedDay))); this._setDate(inst, new Date(year, month - 1, day)); inst._lastChr = (field != 'y' ? '' : inst._lastChr.substr(Math.max(0, inst._lastChr.length - 2))) + chr; } } }); function extendRemove(target, props) { $.extend(target, props); for (var name in props) { if (props[name] == null) { target[name] = null; } } return target; } $.fn.dateEntry = function(options) { var otherArgs = Array.prototype.slice.call(arguments, 1); if (typeof options == 'string' && (options == 'isDisabled' || options == 'getDate')) { return $.dateEntry['_' + options + 'DateEntry'].apply($.dateEntry, [this[0]].concat(otherArgs)); } return this.each(function() { var nodeName = this.nodeName.toLowerCase(); if (nodeName == 'input') { if (typeof options == 'string') { $.dateEntry['_' + options + 'DateEntry'].apply($.dateEntry, [this].concat(otherArgs)); } else { var inlineSettings = ($.fn.metadata ? $(this).metadata() : {}); $.dateEntry._connectDateEntry(this, $.extend(inlineSettings, options)); } } }); }; $.dateEntry = new DateEntry(); })(jQuery);