//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//
//     Date:    7/12/2010
//     Time:    5:02 PM
//     Version: 5.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace Blumen
{
    #region usp_SelectTB_CompaniesDynamic Wrapper
    /// <summary>
    /// This class is a wrapper for the usp_SelectTB_CompaniesDynamic stored procedure.
    /// </summary>
    public class SelectTBCompaniesDynamic
    {
        #region Member Variables
        protected string _connectionString = String.Empty;
        protected SqlConnection _connection = null;
        protected SqlTransaction _transaction = null;
        protected bool _ownsConnection = true;
        protected int _recordsAffected = -1;
        protected int _returnValue = 0;
        protected SqlString _whereCondition = SqlString.Null;
        protected bool _whereConditionSet = false;
        protected SqlString _orderByExpression = SqlString.Null;
        protected bool _orderByExpressionSet = false;
        #endregion

        #region Constructors
        public SelectTBCompaniesDynamic()
        {
        }

        public SelectTBCompaniesDynamic(string connectionString)
        {
            this.ConnectionString = connectionString;
        }

        public SelectTBCompaniesDynamic(SqlConnection connection)
        {
            this.Connection = connection;
        }

        public SelectTBCompaniesDynamic(SqlConnection connection, SqlTransaction transaction)
        {
            this.Connection = connection;
            this.Transaction = transaction;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The connection string to use when executing the usp_SelectTB_CompaniesDynamic stored procedure.
        /// </summary>
        public string ConnectionString
        {
            get { return _connectionString; }
            set { _connectionString = value; }
        }

        /// <summary>
        /// The connection to use when executing the usp_SelectTB_CompaniesDynamic stored procedure.
        /// If this is not null, it will be used instead of creating a new connection.
        /// </summary>
        public SqlConnection Connection
        {
            get { return _connection; }
            set { _connection = value; }
        }

        /// <summary>
        /// The transaction to use when executing the usp_SelectTB_CompaniesDynamic stored procedure.
        /// If this is not null, the stored procedure will be executing within the transaction.
        /// </summary>
        public SqlTransaction Transaction
        {
            get { return _transaction; }
            set { _transaction = value; }
        }

        /// <summary>
        /// Gets the return value from the usp_SelectTB_CompaniesDynamic stored procedure.
        /// </summary>
        public int ReturnValue
        {
            get { return _returnValue; }
        }

        /// <summary>
        /// Gets the number of rows changed, inserted, or deleted by execution of the usp_SelectTB_CompaniesDynamic stored procedure.
        /// </summary>
        public int RecordsAffected
        {
            get { return _recordsAffected; }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlString WhereCondition
        {
            get { return _whereCondition; }
            set
            {
                _whereCondition = value;
                _whereConditionSet = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlString OrderByExpression
        {
            get { return _orderByExpression; }
            set
            {
                _orderByExpression = value;
                _orderByExpressionSet = true;
            }
        }
        #endregion

        #region Helper Methods
        private SqlConnection GetConnection()
        {
            if (this.Connection != null)
            {
                _ownsConnection = false;
                return this.Connection;
            }
            else
            {
                System.Diagnostics.Debug.Assert(this.ConnectionString.Length != 0, "You must first set the ConnectioString property before calling an Execute method.");
                return new SqlConnection(this.ConnectionString);
            }
        }
        #endregion

        #region Execute Methods
        /// <summary>
        /// This method calls the usp_SelectTB_CompaniesDynamic stored procedure.
        /// </summary>
        public virtual void Execute()
        {
            SqlCommand cmd = new SqlCommand();

            SqlConnection cn = this.GetConnection();

            try
            {
                cmd.Connection = cn;
                cmd.Transaction = this.Transaction;
                cmd.CommandText = "[dbo].[usp_SelectTB_CompaniesDynamic]";
                cmd.CommandType = CommandType.StoredProcedure;

                #region Populate Parameters
                SqlParameter prmReturnValue = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int);
                prmReturnValue.Direction = ParameterDirection.ReturnValue;

                SqlParameter prmWhereCondition = cmd.Parameters.Add("@WhereCondition", SqlDbType.NVarChar);
                prmWhereCondition.Direction = ParameterDirection.Input;
                prmWhereCondition.Size = 500;
                if (_whereConditionSet == true || this.WhereCondition.IsNull == false)
                {
                    prmWhereCondition.Value = this.WhereCondition;
                }

                SqlParameter prmOrderByExpression = cmd.Parameters.Add("@OrderByExpression", SqlDbType.NVarChar);
                prmOrderByExpression.Direction = ParameterDirection.Input;
                prmOrderByExpression.Size = 250;
                if (_orderByExpressionSet == true || this.OrderByExpression.IsNull == false)
                {
                    prmOrderByExpression.Value = this.OrderByExpression;
                }
                #endregion

                #region Execute Command
                if (cn.State != ConnectionState.Open) cn.Open();
                _recordsAffected = cmd.ExecuteNonQuery();
                #endregion

                #region Get Output Parameters
                if (prmReturnValue.Value != null && prmReturnValue.Value != DBNull.Value)
                {
                    _returnValue = (int)prmReturnValue.Value;
                }

                #endregion
            }
            finally
            {
                if (_ownsConnection)
                {
                    if (cn.State == ConnectionState.Open)
                    {
                        cn.Close();
                    }

                    cn.Dispose();
                }
                cmd.Dispose();
            }
        }

        /// <summary>
        /// This method calls the usp_SelectTB_CompaniesDynamic stored procedure.
        /// </summary>
        /// <param name="connectionString">The connection string to use</param>
        /// <param name="whereCondition"></param>
        /// <param name="orderByExpression"></param>
        public static void Execute(
        #region Parameters
string connectionString,
                SqlString whereCondition,
                SqlString orderByExpression
        #endregion
)
        {
            SelectTBCompaniesDynamic selectTBCompaniesDynamic = new SelectTBCompaniesDynamic();

            #region Assign Property Values
            selectTBCompaniesDynamic.ConnectionString = connectionString;
            selectTBCompaniesDynamic.WhereCondition = whereCondition;
            selectTBCompaniesDynamic.OrderByExpression = orderByExpression;
            #endregion

            selectTBCompaniesDynamic.Execute();

            #region Get Property Values

            #endregion
        }
        #endregion
        /// <summary>
        /// This method calls the usp_SelectTB_Basic stored procedure and returns a DataSet with the results.
        /// </summary>
        /// <returns>DataSet</returns>
        public virtual DataSet ExecuteDataSet()
        {
            DataSet ds = new DataSet();
            SqlCommand cmd = new SqlCommand();

            SqlConnection cn = this.GetConnection();

            try
            {
                cmd.Connection = cn;
                cmd.Transaction = this.Transaction;
                cmd.CommandText = "[dbo].[usp_SelectTB_CompaniesDynamic]";
                cmd.CommandType = CommandType.StoredProcedure;

                #region Populate Parameters
                SqlParameter prmReturnValue = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int);
                prmReturnValue.Direction = ParameterDirection.ReturnValue;

                SqlParameter prmWhereCondition = cmd.Parameters.Add("@WhereCondition", SqlDbType.NVarChar);
                prmWhereCondition.Direction = ParameterDirection.Input;
                prmWhereCondition.Size = 500;
                if (_whereConditionSet == true || this.WhereCondition.IsNull == false)
                {
                    prmWhereCondition.Value = this.WhereCondition;
                }

                SqlParameter prmOrderByExpression = cmd.Parameters.Add("@OrderByExpression", SqlDbType.NVarChar);
                prmOrderByExpression.Direction = ParameterDirection.Input;
                prmOrderByExpression.Size = 250;
                if (_orderByExpressionSet == true || this.OrderByExpression.IsNull == false)
                {
                    prmOrderByExpression.Value = this.OrderByExpression;
                }
                #endregion

                #region Execute Command
                if (cn.State != ConnectionState.Open) cn.Open();

                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(ds);
                _recordsAffected = ds.Tables[0].Rows.Count;
                #endregion

                #region Get Output Parameters
                if (prmReturnValue.Value != null && prmReturnValue.Value != DBNull.Value)
                {
                    _returnValue = (int)prmReturnValue.Value;
                }

                #endregion
            }
            finally
            {
                if (_ownsConnection)
                {
                    if (cn.State == ConnectionState.Open)
                    {
                        cn.Close();
                    }

                    cn.Dispose();
                }
                cmd.Dispose();
            }

            return ds;
        }
        /// <summary>
        /// This method calls the usp_SelectTB_Basic stored procedure and returns a DataSet with the results.
        /// </summary>
        /// <param name="connectionString">The connection string to use</param>
        /// <param name="whereCondition"></param>
        /// <param name="orderByExpression"></param>
        /// <returns>DataSet</returns>
        public static DataSet ExecuteDataSet(
        #region Parameters
string connectionString,
                SqlString whereCondition,
                SqlString orderByExpression
        #endregion
)
        {
            SelectTBCompaniesDynamic selectTBCompaniesDynamic = new SelectTBCompaniesDynamic();

            #region Assign Property Values
            selectTBCompaniesDynamic.ConnectionString = connectionString;
            selectTBCompaniesDynamic.WhereCondition = whereCondition;
            selectTBCompaniesDynamic.OrderByExpression = orderByExpression;
            #endregion

            DataSet ds = selectTBCompaniesDynamic.ExecuteDataSet();

            #region Get Property Values

            #endregion

            return ds;
        }
    }
    #endregion

}
