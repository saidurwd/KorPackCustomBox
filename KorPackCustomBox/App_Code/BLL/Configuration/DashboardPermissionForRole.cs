//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//
//     Date:    6/18/2012
//     Time:    6:56 PM
//     Version: 5.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace Blumen
{
    #region usp_DashboardPermissionForRole Wrapper
    /// <summary>
    /// This class is a wrapper for the usp_DashboardPermissionForRole stored procedure.
    /// </summary>
    public class DashboardPermissionForRole
    {
        #region Member Variables
        protected string _connectionString = String.Empty;
        protected SqlConnection _connection = null;
        protected SqlTransaction _transaction = null;
        protected bool _ownsConnection = true;
        protected int _recordsAffected = -1;
        protected int _returnValue = 0;
        protected SqlString _createdBy = SqlString.Null;
        protected bool _createdBySet = false;
        protected SqlString _userID = SqlString.Null;
        protected bool _userIDSet = false;
        protected SqlString _splitterRow = SqlString.Null;
        protected bool _splitterRowSet = false;
        protected SqlString _splitterCell = SqlString.Null;
        protected bool _splitterCellSet = false;
        protected SqlString _strDItemID = SqlString.Null;
        protected bool _strDItemIDSet = false;
        protected SqlString _cOMPANY_ID = SqlString.Null;
        protected bool _cOMPANY_IDSet = false;
        #endregion

        #region Constructors
        public DashboardPermissionForRole()
        {
        }

        public DashboardPermissionForRole(string connectionString)
        {
            this.ConnectionString = connectionString;
        }

        public DashboardPermissionForRole(SqlConnection connection)
        {
            this.Connection = connection;
        }

        public DashboardPermissionForRole(SqlConnection connection, SqlTransaction transaction)
        {
            this.Connection = connection;
            this.Transaction = transaction;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The connection string to use when executing the usp_DashboardPermissionForRole stored procedure.
        /// </summary>
        public string ConnectionString
        {
            get { return _connectionString; }
            set { _connectionString = value; }
        }

        /// <summary>
        /// The connection to use when executing the usp_DashboardPermissionForRole stored procedure.
        /// If this is not null, it will be used instead of creating a new connection.
        /// </summary>
        public SqlConnection Connection
        {
            get { return _connection; }
            set { _connection = value; }
        }

        /// <summary>
        /// The transaction to use when executing the usp_DashboardPermissionForRole stored procedure.
        /// If this is not null, the stored procedure will be executing within the transaction.
        /// </summary>
        public SqlTransaction Transaction
        {
            get { return _transaction; }
            set { _transaction = value; }
        }

        /// <summary>
        /// Gets the return value from the usp_DashboardPermissionForRole stored procedure.
        /// </summary>
        public int ReturnValue
        {
            get { return _returnValue; }
        }

        /// <summary>
        /// Gets the number of rows changed, inserted, or deleted by execution of the usp_DashboardPermissionForRole stored procedure.
        /// </summary>
        public int RecordsAffected
        {
            get { return _recordsAffected; }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlString CreatedBy
        {
            get { return _createdBy; }
            set
            {
                _createdBy = value;
                _createdBySet = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlString UserID
        {
            get { return _userID; }
            set
            {
                _userID = value;
                _userIDSet = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlString SplitterRow
        {
            get { return _splitterRow; }
            set
            {
                _splitterRow = value;
                _splitterRowSet = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlString SplitterCell
        {
            get { return _splitterCell; }
            set
            {
                _splitterCell = value;
                _splitterCellSet = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlString strDItemID
        {
            get { return _strDItemID; }
            set
            {
                _strDItemID = value;
                _strDItemIDSet = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlString COMPANY_ID
        {
            get { return _cOMPANY_ID; }
            set
            {
                _cOMPANY_ID = value;
                _cOMPANY_IDSet = true;
            }
        }
        #endregion

        #region Helper Methods
        private SqlConnection GetConnection()
        {
            if (this.Connection != null)
            {
                _ownsConnection = false;
                return this.Connection;
            }
            else
            {
                System.Diagnostics.Debug.Assert(this.ConnectionString.Length != 0, "You must first set the ConnectioString property before calling an Execute method.");
                return new SqlConnection(this.ConnectionString);
            }
        }
        #endregion

        #region Execute Methods
        /// <summary>
        /// This method calls the usp_DashboardPermissionForRole stored procedure.
        /// </summary>
        public virtual void Execute()
        {
            SqlCommand cmd = new SqlCommand();

            SqlConnection cn = this.GetConnection();

            try
            {
                cmd.Connection = cn;
                cmd.Transaction = this.Transaction;
                cmd.CommandText = "[dbo].[usp_DashboardPermissionForRole]";
                cmd.CommandType = CommandType.StoredProcedure;

                #region Populate Parameters
                SqlParameter prmReturnValue = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int);
                prmReturnValue.Direction = ParameterDirection.ReturnValue;

                SqlParameter prmCreatedBy = cmd.Parameters.Add("@CreatedBy", SqlDbType.VarChar);
                prmCreatedBy.Direction = ParameterDirection.Input;
                prmCreatedBy.Size = 10;
                if (_createdBySet == true || this.CreatedBy.IsNull == false)
                {
                    prmCreatedBy.Value = this.CreatedBy;
                }

                SqlParameter prmUserID = cmd.Parameters.Add("@UserID", SqlDbType.VarChar);
                prmUserID.Direction = ParameterDirection.Input;
                prmUserID.Size = 10;
                if (_userIDSet == true || this.UserID.IsNull == false)
                {
                    prmUserID.Value = this.UserID;
                }

                SqlParameter prmSplitterRow = cmd.Parameters.Add("@SplitterRow", SqlDbType.VarChar);
                prmSplitterRow.Direction = ParameterDirection.Input;
                prmSplitterRow.Size = 10;
                if (_splitterRowSet == true || this.SplitterRow.IsNull == false)
                {
                    prmSplitterRow.Value = this.SplitterRow;
                }

                SqlParameter prmSplitterCell = cmd.Parameters.Add("@SplitterCell", SqlDbType.VarChar);
                prmSplitterCell.Direction = ParameterDirection.Input;
                prmSplitterCell.Size = 10;
                if (_splitterCellSet == true || this.SplitterCell.IsNull == false)
                {
                    prmSplitterCell.Value = this.SplitterCell;
                }

                SqlParameter prmstrDItemID = cmd.Parameters.Add("@strDItemID", SqlDbType.VarChar);
                prmstrDItemID.Direction = ParameterDirection.Input;
                prmstrDItemID.Size = -1;
                if (_strDItemIDSet == true || this.strDItemID.IsNull == false)
                {
                    prmstrDItemID.Value = this.strDItemID;
                }

                SqlParameter prmCOMPANY_ID = cmd.Parameters.Add("@COMPANY_ID", SqlDbType.Char);
                prmCOMPANY_ID.Direction = ParameterDirection.Input;
                prmCOMPANY_ID.Size = 4;
                if (_cOMPANY_IDSet == true || this.COMPANY_ID.IsNull == false)
                {
                    prmCOMPANY_ID.Value = this.COMPANY_ID;
                }
                #endregion

                #region Execute Command
                if (cn.State != ConnectionState.Open) cn.Open();
                _recordsAffected = cmd.ExecuteNonQuery();
                #endregion

                #region Get Output Parameters
                if (prmReturnValue.Value != null && prmReturnValue.Value != DBNull.Value)
                {
                    _returnValue = (int)prmReturnValue.Value;
                }

                #endregion
            }
            finally
            {
                if (_ownsConnection)
                {
                    if (cn.State == ConnectionState.Open)
                    {
                        cn.Close();
                    }

                    cn.Dispose();
                }
                cmd.Dispose();
            }
        }

        /// <summary>
        /// This method calls the usp_DashboardPermissionForRole stored procedure.
        /// </summary>
        /// <param name="connectionString">The connection string to use</param>
        /// <param name="createdBy"></param>
        /// <param name="userID"></param>
        /// <param name="splitterRow"></param>
        /// <param name="splitterCell"></param>
        /// <param name="strDItemID"></param>
        /// <param name="cOMPANY_ID"></param>
        public static void Execute(
        #region Parameters
string connectionString,
                SqlString createdBy,
                SqlString userID,
                SqlString splitterRow,
                SqlString splitterCell,
                SqlString strDItemID,
                SqlString cOMPANY_ID
        #endregion
)
        {
            DashboardPermissionForRole dashboardPermissionForRole = new DashboardPermissionForRole();

            #region Assign Property Values
            dashboardPermissionForRole.ConnectionString = connectionString;
            dashboardPermissionForRole.CreatedBy = createdBy;
            dashboardPermissionForRole.UserID = userID;
            dashboardPermissionForRole.SplitterRow = splitterRow;
            dashboardPermissionForRole.SplitterCell = splitterCell;
            dashboardPermissionForRole.strDItemID = strDItemID;
            dashboardPermissionForRole.COMPANY_ID = cOMPANY_ID;
            #endregion

            dashboardPermissionForRole.Execute();

            #region Get Property Values

            #endregion
        }
        #endregion
    }
    #endregion
}
