//------------------------------------------------------------------------------
// <autogenerated>
//     Author : Faruk Ahmed
//
//     Date:    5/30/2012
//     Time:    11:36 PM
//     Version: 5.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace Blumen
{
    #region usp_UpdateUserInfo Wrapper
    /// <summary>
    /// This class is a wrapper for the usp_UpdateUserInfo stored procedure.
    /// </summary>
    public class UpdateUserInfo
    {
        #region Member Variables
        protected string _connectionString = String.Empty;
        protected SqlConnection _connection = null;
        protected SqlTransaction _transaction = null;
        protected bool _ownsConnection = true;
        protected int _recordsAffected = -1;
        protected int _returnValue = 0;
        protected SqlString _userID = SqlString.Null;
        protected bool _userIDSet = false;
        protected SqlString _loginID = SqlString.Null;
        protected bool _loginIDSet = false;
        protected SqlString _password = SqlString.Null;
        protected bool _passwordSet = false;
        protected SqlString _roleID = SqlString.Null;
        protected bool _roleIDSet = false;
        protected SqlString _createdBy = SqlString.Null;
        protected bool _createdBySet = false;
        protected SqlString _userActive = SqlString.Null;
        protected bool _userActiveSet = false;
        protected SqlString _cOMPANY_ID = SqlString.Null;
        protected bool _cOMPANY_IDSet = false;

        protected SqlString _nameOfUser = SqlString.Null;
        protected bool _nameOfUserSet = false;

        protected SqlString _eMail = SqlString.Null;
        protected bool _eMailSet = false;

        protected SqlString _customerId = SqlString.Null;
        protected bool _customerIdSet = false;
        #endregion

        #region Constructors
        public UpdateUserInfo()
        {
        }

        public UpdateUserInfo(string connectionString)
        {
            this.ConnectionString = connectionString;
        }

        public UpdateUserInfo(SqlConnection connection)
        {
            this.Connection = connection;
        }

        public UpdateUserInfo(SqlConnection connection, SqlTransaction transaction)
        {
            this.Connection = connection;
            this.Transaction = transaction;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The connection string to use when executing the usp_UpdateUserInfo stored procedure.
        /// </summary>
        public string ConnectionString
        {
            get { return _connectionString; }
            set { _connectionString = value; }
        }

        /// <summary>
        /// The connection to use when executing the usp_UpdateUserInfo stored procedure.
        /// If this is not null, it will be used instead of creating a new connection.
        /// </summary>
        public SqlConnection Connection
        {
            get { return _connection; }
            set { _connection = value; }
        }

        /// <summary>
        /// The transaction to use when executing the usp_UpdateUserInfo stored procedure.
        /// If this is not null, the stored procedure will be executing within the transaction.
        /// </summary>
        public SqlTransaction Transaction
        {
            get { return _transaction; }
            set { _transaction = value; }
        }

        /// <summary>
        /// Gets the return value from the usp_UpdateUserInfo stored procedure.
        /// </summary>
        public int ReturnValue
        {
            get { return _returnValue; }
        }

        /// <summary>
        /// Gets the number of rows changed, inserted, or deleted by execution of the usp_UpdateUserInfo stored procedure.
        /// </summary>
        public int RecordsAffected
        {
            get { return _recordsAffected; }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlString UserID
        {
            get { return _userID; }
            set
            {
                _userID = value;
                _userIDSet = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlString LoginID
        {
            get { return _loginID; }
            set
            {
                _loginID = value;
                _loginIDSet = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlString Password
        {
            get { return _password; }
            set
            {
                _password = value;
                _passwordSet = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlString RoleID
        {
            get { return _roleID; }
            set
            {
                _roleID = value;
                _roleIDSet = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlString CreatedBy
        {
            get { return _createdBy; }
            set
            {
                _createdBy = value;
                _createdBySet = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlString UserActive
        {
            get { return _userActive; }
            set
            {
                _userActive = value;
                _userActiveSet = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlString COMPANY_ID
        {
            get { return _cOMPANY_ID; }
            set
            {
                _cOMPANY_ID = value;
                _cOMPANY_IDSet = true;
            }
        }
        

        /// <summary>
        /// 
        /// </summary>
        public SqlString NameOfUser
        {
            get { return _nameOfUser; }
            set
            {
                _nameOfUser = value;
                _nameOfUserSet = true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlString EMail
        {
            get { return _eMail; }
            set
            {
                _eMail= value;
                _eMailSet= true;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public SqlString CustomerId
        {
            get { return _customerId; }
            set
            {
                _customerId = value;
                _customerIdSet = true;
            }
        }
        
        #endregion

        #region Helper Methods
        private SqlConnection GetConnection()
        {
            if (this.Connection != null)
            {
                _ownsConnection = false;
                return this.Connection;
            }
            else
            {
                System.Diagnostics.Debug.Assert(this.ConnectionString.Length != 0, "You must first set the ConnectioString property before calling an Execute method.");
                return new SqlConnection(this.ConnectionString);
            }
        }
        #endregion

        #region Execute Methods
        /// <summary>
        /// This method calls the usp_UpdateUserInfo stored procedure.
        /// </summary>
        public virtual void Execute()
        {
            SqlCommand cmd = new SqlCommand();

            SqlConnection cn = this.GetConnection();

            try
            {
                cmd.Connection = cn;
                cmd.Transaction = this.Transaction;
                cmd.CommandText = "[dbo].[usp_UpdateUserInfo]";
                cmd.CommandType = CommandType.StoredProcedure;

                #region Populate Parameters
                SqlParameter prmReturnValue = cmd.Parameters.Add("@RETURN_VALUE", SqlDbType.Int);
                prmReturnValue.Direction = ParameterDirection.ReturnValue;

                SqlParameter prmUserID = cmd.Parameters.Add("@UserID", SqlDbType.VarChar);
                prmUserID.Direction = ParameterDirection.Input;
                prmUserID.Size = 50;
                if (_userIDSet == true || this.UserID.IsNull == false)
                {
                    prmUserID.Value = this.UserID;
                }

                SqlParameter prmLoginID = cmd.Parameters.Add("@LoginID", SqlDbType.VarChar);
                prmLoginID.Direction = ParameterDirection.Input;
                prmLoginID.Size = 50;
                if (_loginIDSet == true || this.LoginID.IsNull == false)
                {
                    prmLoginID.Value = this.LoginID;
                }

                SqlParameter prmPassword = cmd.Parameters.Add("@Password", SqlDbType.VarChar);
                prmPassword.Direction = ParameterDirection.Input;
                prmPassword.Size = 50;
                if (_passwordSet == true || this.Password.IsNull == false)
                {
                    prmPassword.Value = this.Password;
                }

                SqlParameter prmRoleID = cmd.Parameters.Add("@RoleID", SqlDbType.VarChar);
                prmRoleID.Direction = ParameterDirection.Input;
                prmRoleID.Size = 10;
                if (_roleIDSet == true || this.RoleID.IsNull == false)
                {
                    prmRoleID.Value = this.RoleID;
                }

                SqlParameter prmCreatedBy = cmd.Parameters.Add("@CreatedBy", SqlDbType.VarChar);
                prmCreatedBy.Direction = ParameterDirection.Input;
                prmCreatedBy.Size = 10;
                if (_createdBySet == true || this.CreatedBy.IsNull == false)
                {
                    prmCreatedBy.Value = this.CreatedBy;
                }

                SqlParameter prmUserActive = cmd.Parameters.Add("@UserActive", SqlDbType.VarChar);
                prmUserActive.Direction = ParameterDirection.Input;
                prmUserActive.Size = 10;
                if (_userActiveSet == true || this.UserActive.IsNull == false)
                {
                    prmUserActive.Value = this.UserActive;
                }

                SqlParameter prmCOMPANY_ID = cmd.Parameters.Add("@COMPANY_ID", SqlDbType.Char);
                prmCOMPANY_ID.Direction = ParameterDirection.Input;
                prmCOMPANY_ID.Size = 4;
                if (_cOMPANY_IDSet == true || this.COMPANY_ID.IsNull == false)
                {
                    prmCOMPANY_ID.Value = this.COMPANY_ID;
                }

                SqlParameter prmUserName = cmd.Parameters.Add("@UserName", SqlDbType.Char);
                prmUserName.Direction = ParameterDirection.Input;
                prmUserName.Size = 50;
                if (_nameOfUserSet == true || this.NameOfUser.IsNull == false)
                {
                    prmUserName.Value = this.NameOfUser;
                }

                SqlParameter prmEmail = cmd.Parameters.Add("@Email", SqlDbType.Char);
                prmEmail.Direction = ParameterDirection.Input;
                prmEmail.Size = 50;
                if (_eMailSet == true || this.EMail.IsNull == false)
                {
                    prmEmail.Value = this.EMail;
                }
                SqlParameter prmCustomerId = cmd.Parameters.Add("@CustomerId", SqlDbType.Char);
                prmCustomerId.Direction = ParameterDirection.Input;
                prmCustomerId.Size = 50;
                if (_customerIdSet == true || this.CustomerId.IsNull == false)
                {
                    prmCustomerId.Value = this.CustomerId;
                }
                
                #endregion

                #region Execute Command
                if (cn.State != ConnectionState.Open) cn.Open();
                _recordsAffected = cmd.ExecuteNonQuery();
                #endregion

                #region Get Output Parameters
                if (prmReturnValue.Value != null && prmReturnValue.Value != DBNull.Value)
                {
                    _returnValue = (int)prmReturnValue.Value;
                }

                #endregion
            }
            finally
            {
                if (_ownsConnection)
                {
                    if (cn.State == ConnectionState.Open)
                    {
                        cn.Close();
                    }

                    cn.Dispose();
                }
                cmd.Dispose();
            }
        }

        /// <summary>
        /// This method calls the usp_UpdateUserInfo stored procedure.
        /// </summary>
        /// <param name="connectionString">The connection string to use</param>
        /// <param name="userID"></param>
        /// <param name="loginID"></param>
        /// <param name="password"></param>
        /// <param name="roleID"></param>
        /// <param name="createdBy"></param>
        /// <param name="userActive"></param>
        /// <param name="cOMPANY_ID"></param>
        /// <param name="UserName"></param>
        /// <param name="Email"></param>
        /// <param name="CustomerId"></param>

        public static void Execute(
        #region Parameters
string connectionString,
                SqlString userID,
                SqlString loginID,
                SqlString password,
                SqlString roleID,
                SqlString createdBy,
                SqlString userActive,
                SqlString cOMPANY_ID,
                SqlString NameOfUser,
                SqlString Email,
                SqlString CustomerId
        #endregion
)
        {
            UpdateUserInfo updateUserInfo = new UpdateUserInfo();

            #region Assign Property Values
            updateUserInfo.ConnectionString = connectionString;
            updateUserInfo.UserID = userID;
            updateUserInfo.LoginID = loginID;
            updateUserInfo.Password = password;
            updateUserInfo.RoleID = roleID;
            updateUserInfo.CreatedBy = createdBy;
            updateUserInfo.UserActive = userActive;
            updateUserInfo.COMPANY_ID = cOMPANY_ID;
            updateUserInfo.NameOfUser = NameOfUser;
            updateUserInfo.EMail = Email;
            updateUserInfo.CustomerId = CustomerId;
            
            #endregion

            updateUserInfo.Execute();

            #region Get Property Values

            #endregion
        }
        #endregion
    }
    #endregion
}
